"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ATARequest = _interopRequireDefault(require("../model/ATARequest"));

var _ATAResponse = _interopRequireDefault(require("../model/ATAResponse"));

var _AirdropRequest = _interopRequireDefault(require("../model/AirdropRequest"));

var _BalanceRequest = _interopRequireDefault(require("../model/BalanceRequest"));

var _BalanceResponse = _interopRequireDefault(require("../model/BalanceResponse"));

var _GetPublicKeyRequest = _interopRequireDefault(require("../model/GetPublicKeyRequest"));

var _ListNFTsRequest = _interopRequireDefault(require("../model/ListNFTsRequest"));

var _ListNFTsResponse = _interopRequireDefault(require("../model/ListNFTsResponse"));

var _PublicKey = _interopRequireDefault(require("../model/PublicKey"));

var _SecretPhrase = _interopRequireDefault(require("../model/SecretPhrase"));

var _TransferRequest = _interopRequireDefault(require("../model/TransferRequest"));

var _TransferResponse = _interopRequireDefault(require("../model/TransferResponse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* SolanaWallet service.
* @module api/SolanaWalletApi
* @version 1.0.0
*/
var SolanaWalletApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SolanaWalletApi. 
  * @alias module:api/SolanaWalletApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SolanaWalletApi(apiClient) {
    _classCallCheck(this, SolanaWalletApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the solanaWalletAirdropPost operation.
   * @callback module:api/SolanaWalletApi~solanaWalletAirdropPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TransferResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get an airdrop on devnet
   * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-airdrop\" target=\"_blank\">See examples (Python)</a>.      Use this endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount of 0.015,  which is the minimum amount of SOL you need to mint a Metaplex NFT and then transfer it to another wallet.
   * @param {Object} opts Optional parameters
   * @param {module:model/AirdropRequest} opts.airdropRequest 
   * @param {module:api/SolanaWalletApi~solanaWalletAirdropPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/TransferResponse}
   */


  _createClass(SolanaWalletApi, [{
    key: "solanaWalletAirdropPost",
    value: function solanaWalletAirdropPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['airdropRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransferResponse["default"];
      return this.apiClient.callApi('/solana/wallet/airdrop', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaWalletAssociatedTokenAccountPost operation.
     * @callback module:api/SolanaWalletApi~solanaWalletAssociatedTokenAccountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ATAResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Derive an associated token account address
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-associated-token-account-address\" target=\"_blank\">See example (Python)</a>.      *Each wallet can own tokens, but in Solana, each token is actually held by an <a href=\"https://spl.solana.com/associated-token-account\" target=\"_blank\">associated token account</a> (ATA), which is an account specific for a token owned by the wallet. When you transfer an SPL token, such as Serum, or transfer an NFT, you're transfering from an ATA you own to another person's ATA for that specific token. With this endpoint, you can derive an associated token address given a wallet and a token address.*
     * @param {Object} opts Optional parameters
     * @param {module:model/ATARequest} opts.aTARequest 
     * @param {module:api/SolanaWalletApi~solanaWalletAssociatedTokenAccountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ATAResponse}
     */

  }, {
    key: "solanaWalletAssociatedTokenAccountPost",
    value: function solanaWalletAssociatedTokenAccountPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['aTARequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ATAResponse["default"];
      return this.apiClient.callApi('/solana/wallet/associated_token_account', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaWalletBalancePost operation.
     * @callback module:api/SolanaWalletApi~solanaWalletBalancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet's balance
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-balance\" target=\"_blank\">See examples (Python)</a>.      See the balance of a wallet in SOL or Lamports.
     * @param {Object} opts Optional parameters
     * @param {module:model/BalanceRequest} opts.balanceRequest 
     * @param {module:api/SolanaWalletApi~solanaWalletBalancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BalanceResponse}
     */

  }, {
    key: "solanaWalletBalancePost",
    value: function solanaWalletBalancePost(opts, callback) {
      opts = opts || {};
      var postBody = opts['balanceRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _BalanceResponse["default"];
      return this.apiClient.callApi('/solana/wallet/balance', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaWalletNftsPost operation.
     * @callback module:api/SolanaWalletApi~solanaWalletNftsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNFTsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address's NFTs
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-nfts\" target=\"_blank\">See examples (Python)</a>.      See the NFTs that belong to a given public key address
     * @param {Object} opts Optional parameters
     * @param {module:model/ListNFTsRequest} opts.listNFTsRequest 
     * @param {module:api/SolanaWalletApi~solanaWalletNftsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNFTsResponse}
     */

  }, {
    key: "solanaWalletNftsPost",
    value: function solanaWalletNftsPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['listNFTsRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ListNFTsResponse["default"];
      return this.apiClient.callApi('/solana/wallet/nfts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaWalletPublicKeyPost operation.
     * @callback module:api/SolanaWalletApi~solanaWalletPublicKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Derive public key
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-public-key\" target=\"_blank\">See examples (Python)</a>.      Returns a public key given a secret recovery phrase and optionally a passphrase and a derivation path.  *You can generate a unique public key with each combination of secret recovery phrase, passphrase, and derivation path. Thus, with a single secret recovery phrase, you can generate many public keys. If you are just starting, just supply the secret recovery phrase you generated with the Solana Wallet Secret Recovery Phrase endpoint.*  *If you are trying to get a public key that already exists (e.g., created in the Phantom wallet), make sure you use the correct derivation path and passphrase. To read more about that, see the descriptions of those parameters below.*
     * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
     * @param {module:api/SolanaWalletApi~solanaWalletPublicKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicKey}
     */

  }, {
    key: "solanaWalletPublicKeyPost",
    value: function solanaWalletPublicKeyPost(getPublicKeyRequest, callback) {
      var postBody = getPublicKeyRequest; // verify the required parameter 'getPublicKeyRequest' is set

      if (getPublicKeyRequest === undefined || getPublicKeyRequest === null) {
        throw new Error("Missing the required parameter 'getPublicKeyRequest' when calling solanaWalletPublicKeyPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PublicKey["default"];
      return this.apiClient.callApi('/solana/wallet/public_key', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaWalletSecretRecoveryPhrasePost operation.
     * @callback module:api/SolanaWalletApi~solanaWalletSecretRecoveryPhrasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretPhrase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate secret phrase
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-secret-phrase\" target=\"_blank\">See examples (Python)</a>.  Use this endpoint to securely and randomly generate a secret recovery phrase for a Solana wallet. Complete the wallet creation by using the endpoint below.
     * @param {module:api/SolanaWalletApi~solanaWalletSecretRecoveryPhrasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretPhrase}
     */

  }, {
    key: "solanaWalletSecretRecoveryPhrasePost",
    value: function solanaWalletSecretRecoveryPhrasePost(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SecretPhrase["default"];
      return this.apiClient.callApi('/solana/wallet/secret_recovery_phrase', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaWalletTransferPost operation.
     * @callback module:api/SolanaWalletApi~solanaWalletTransferPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer SOL, a token, or an NFT to another address
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-sol\" target=\"_blank\">See transfer SOL example (Python)</a>.  <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-nft\" target=\"_blank\">See transfer NFT example (can also be used for SPL token) (Python)</a>.  Transfer SOL, a token or an NFT to another address. If you're transferring an NFT, supply the `mint` (the address of the mint) for the `token_address`.  If you're transfering a token, supply the token address found on the explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href=\"https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\" target=\"_blank\">Serum Token</a>) for the `token_address`. If you're transferring SOL, do not supply a value for `token_address`.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransferRequest} opts.transferRequest 
     * @param {module:api/SolanaWalletApi~solanaWalletTransferPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferResponse}
     */

  }, {
    key: "solanaWalletTransferPost",
    value: function solanaWalletTransferPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['transferRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransferResponse["default"];
      return this.apiClient.callApi('/solana/wallet/transfer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return SolanaWalletApi;
}();

exports["default"] = SolanaWalletApi;