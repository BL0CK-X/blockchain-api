"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CreateTestCandyMachineRequest = _interopRequireDefault(require("../model/CreateTestCandyMachineRequest"));

var _CreateTestCandyMachineResponse = _interopRequireDefault(require("../model/CreateTestCandyMachineResponse"));

var _GetCandyDetailsErrorResponse = _interopRequireDefault(require("../model/GetCandyDetailsErrorResponse"));

var _GetCandyDetailsRequest = _interopRequireDefault(require("../model/GetCandyDetailsRequest"));

var _GetCandyDetailsResponse = _interopRequireDefault(require("../model/GetCandyDetailsResponse"));

var _GetConfigInfoRequest = _interopRequireDefault(require("../model/GetConfigInfoRequest"));

var _GetConfigInfoResponse = _interopRequireDefault(require("../model/GetConfigInfoResponse"));

var _GetMintedNFTsRequest = _interopRequireDefault(require("../model/GetMintedNFTsRequest"));

var _GetMintedNFTsResponse = _interopRequireDefault(require("../model/GetMintedNFTsResponse"));

var _MintNFTErrorResponse = _interopRequireDefault(require("../model/MintNFTErrorResponse"));

var _MintNFTRequest = _interopRequireDefault(require("../model/MintNFTRequest"));

var _MintNFTResponse = _interopRequireDefault(require("../model/MintNFTResponse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* SolanaCandyMachine service.
* @module api/SolanaCandyMachineApi
* @version 1.0.0
*/
var SolanaCandyMachineApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SolanaCandyMachineApi. 
  * @alias module:api/SolanaCandyMachineApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SolanaCandyMachineApi(apiClient) {
    _classCallCheck(this, SolanaCandyMachineApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the solanaNftCandyMachineConfigInfoPost operation.
   * @callback module:api/SolanaCandyMachineApi~solanaNftCandyMachineConfigInfoPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/GetConfigInfoResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get the details of a Solana Candy Machine configuration 
   * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-config-info\" target=\"_blank\">See examples (Python)</a>.  Use this endpoint to get the details of a Solana Candy Machine configuration.
   * @param {Object} opts Optional parameters
   * @param {module:model/GetConfigInfoRequest} opts.getConfigInfoRequest 
   * @param {module:api/SolanaCandyMachineApi~solanaNftCandyMachineConfigInfoPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/GetConfigInfoResponse}
   */


  _createClass(SolanaCandyMachineApi, [{
    key: "solanaNftCandyMachineConfigInfoPost",
    value: function solanaNftCandyMachineConfigInfoPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['getConfigInfoRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetConfigInfoResponse["default"];
      return this.apiClient.callApi('/solana/nft/candy_machine/config/info', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftCandyMachineInfoPost operation.
     * @callback module:api/SolanaCandyMachineApi~solanaNftCandyMachineInfoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCandyDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Metaplex candy machine's details 
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-info\" target=\"_blank\">See examples (Python)</a>.  Use this endpoint to get the following details about a Metaplex candy machine: uuid, go live date, items in the collection, and the cost to mint.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetCandyDetailsRequest} opts.getCandyDetailsRequest 
     * @param {module:api/SolanaCandyMachineApi~solanaNftCandyMachineInfoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCandyDetailsResponse}
     */

  }, {
    key: "solanaNftCandyMachineInfoPost",
    value: function solanaNftCandyMachineInfoPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['getCandyDetailsRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCandyDetailsResponse["default"];
      return this.apiClient.callApi('/solana/nft/candy_machine/info', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftCandyMachineMintPost operation.
     * @callback module:api/SolanaCandyMachineApi~solanaNftCandyMachineMintPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MintNFTResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint an NFT from a Metaplex candy machine
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/mint-from-candy-machine\" target=\"_blank\">See examples (Python)</a>.  Use this endpoint to mint an NFT from a metaplex candy machine as soon as it drops.
     * @param {Object} opts Optional parameters
     * @param {module:model/MintNFTRequest} opts.mintNFTRequest 
     * @param {module:api/SolanaCandyMachineApi~solanaNftCandyMachineMintPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MintNFTResponse}
     */

  }, {
    key: "solanaNftCandyMachineMintPost",
    value: function solanaNftCandyMachineMintPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['mintNFTRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MintNFTResponse["default"];
      return this.apiClient.callApi('/solana/nft/candy_machine/mint', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftCandyMachineNftsPost operation.
     * @callback module:api/SolanaCandyMachineApi~solanaNftCandyMachineNftsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMintedNFTsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of NFTs minted from a Solana Candy Machine 
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-minted-nfts\" target=\"_blank\">See examples (Python)</a>.  Use this endpoint to get list of NFTs minted from a Solana Candy Machine.  See example for how to get the list of NFT hashes <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-hash-table\" target=\"_blank\">here</a>.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetMintedNFTsRequest} opts.getMintedNFTsRequest 
     * @param {module:api/SolanaCandyMachineApi~solanaNftCandyMachineNftsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMintedNFTsResponse>}
     */

  }, {
    key: "solanaNftCandyMachineNftsPost",
    value: function solanaNftCandyMachineNftsPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['getMintedNFTsRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [_GetMintedNFTsResponse["default"]];
      return this.apiClient.callApi('/solana/nft/candy_machine/nfts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftCandyMachinePost operation.
     * @callback module:api/SolanaCandyMachineApi~solanaNftCandyMachinePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTestCandyMachineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a test candy machine 
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/create-test-candy-machine\" target=\"_blank\">See examples (Python)</a>.   Use this endpoint to create a test candy machine so that you can test your minting bot.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTestCandyMachineRequest} opts.createTestCandyMachineRequest 
     * @param {module:api/SolanaCandyMachineApi~solanaNftCandyMachinePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTestCandyMachineResponse}
     */

  }, {
    key: "solanaNftCandyMachinePost",
    value: function solanaNftCandyMachinePost(opts, callback) {
      opts = opts || {};
      var postBody = opts['createTestCandyMachineRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateTestCandyMachineResponse["default"];
      return this.apiClient.callApi('/solana/nft/candy_machine', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return SolanaCandyMachineApi;
}();

exports["default"] = SolanaCandyMachineApi;