"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _GetCandyMachineIDRequest = _interopRequireDefault(require("../model/GetCandyMachineIDRequest"));

var _GetCandyMachineIDResponse = _interopRequireDefault(require("../model/GetCandyMachineIDResponse"));

var _NFT = _interopRequireDefault(require("../model/NFT"));

var _NFTMintErrorResponse = _interopRequireDefault(require("../model/NFTMintErrorResponse"));

var _NFTMintFee = _interopRequireDefault(require("../model/NFTMintFee"));

var _NFTMintRequest = _interopRequireDefault(require("../model/NFTMintRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* SolanaNFT service.
* @module api/SolanaNFTApi
* @version 1.0.0
*/
var SolanaNFTApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SolanaNFTApi. 
  * @alias module:api/SolanaNFTApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SolanaNFTApi(apiClient) {
    _classCallCheck(this, SolanaNFTApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Callback function to receive the result of the solanaNftCandyMachineIdPost operation.
   * @callback module:api/SolanaNFTApi~solanaNftCandyMachineIdPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/GetCandyMachineIDResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get the ID of the candy machine of an NFT 
   * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-candy-machine-id\" target=\"_blank\">See examples (Python)</a>.  Get the candy machine ID from where the NFT came, if any. NFTs can also be minted without a candy machine.
   * @param {Object} opts Optional parameters
   * @param {module:model/GetCandyMachineIDRequest} opts.getCandyMachineIDRequest 
   * @param {module:api/SolanaNFTApi~solanaNftCandyMachineIdPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/GetCandyMachineIDResponse}
   */


  _createClass(SolanaNFTApi, [{
    key: "solanaNftCandyMachineIdPost",
    value: function solanaNftCandyMachineIdPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['getCandyMachineIDRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetCandyMachineIDResponse["default"];
      return this.apiClient.callApi('/solana/nft/candy_machine_id', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftMintFeeGet operation.
     * @callback module:api/SolanaNFTApi~solanaNftMintFeeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NFTMintFee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the NFT mint fee
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-mint-fee\" target=\"_blank\">See examples (Python)</a>.      Get the estimated fee for minting an NFT on the Solana blockchain using the Metaplex protocol.
     * @param {module:api/SolanaNFTApi~solanaNftMintFeeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NFTMintFee}
     */

  }, {
    key: "solanaNftMintFeeGet",
    value: function solanaNftMintFeeGet(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NFTMintFee["default"];
      return this.apiClient.callApi('/solana/nft/mint/fee', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftNetworkMintAddressGet operation.
     * @callback module:api/SolanaNFTApi~solanaNftNetworkMintAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NFT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an NFT's metadata
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-metadata\" target=\"_blank\">See examples (Python)</a>.       Get the metadata of an NFT.
     * @param {String} network The network ID (devnet, mainnet-beta)
     * @param {String} mintAddress The mint address of the NFT
     * @param {module:api/SolanaNFTApi~solanaNftNetworkMintAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NFT}
     */

  }, {
    key: "solanaNftNetworkMintAddressGet",
    value: function solanaNftNetworkMintAddressGet(network, mintAddress, callback) {
      var postBody = null; // verify the required parameter 'network' is set

      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling solanaNftNetworkMintAddressGet");
      } // verify the required parameter 'mintAddress' is set


      if (mintAddress === undefined || mintAddress === null) {
        throw new Error("Missing the required parameter 'mintAddress' when calling solanaNftNetworkMintAddressGet");
      }

      var pathParams = {
        'network': network,
        'mint_address': mintAddress
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NFT["default"];
      return this.apiClient.callApi('/solana/nft/{network}/{mint_address}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
    /**
     * Callback function to receive the result of the solanaNftPost operation.
     * @callback module:api/SolanaNFTApi~solanaNftPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NFT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an NFT on Solana
     * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/create-an-nft\" target=\"_blank\">See examples (Python)</a>.  Create a Metaplex NFT on Solana. Read more on this <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/docs-notes/v1-solana-nft\" target=\"_blank\">here</a>.
     * @param {Object} opts Optional parameters
     * @param {module:model/NFTMintRequest} opts.nFTMintRequest 
     * @param {module:api/SolanaNFTApi~solanaNftPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NFT}
     */

  }, {
    key: "solanaNftPost",
    value: function solanaNftPost(opts, callback) {
      opts = opts || {};
      var postBody = opts['nFTMintRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['APIKeyID', 'APISecretKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _NFT["default"];
      return this.apiClient.callApi('/solana/nft', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return SolanaNFTApi;
}();

exports["default"] = SolanaNFTApi;